---
title: "New York Housing Prices Model"
subtitle: "Group L11G04"
author: "Hanni Fairuz, Richard Eng, Henry Nguyen, Shilei Sun and Zhaofu Sun"
format:
  revealjs:
     # can set self-contained to false if not uploading to Canvas
     # true makes the HTML files pretty big
    self-contained: true
    fig-format: retina
    theme: [default, "sydney.scss"]
    code-line-numbers: false
    slide-number: c
    scrollable: true
    pdf-max-pages-per-slide: 1
    history: false # don't add each slide to browser history
bibliography: pres_bib.bib
csl: apa-old-doi-prefix.csl
execute:
  echo: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

```{r, echo = FALSE}
library(leaps)
library(lmSubsets)
library(ggfortify)
library(sjPlot)
library(equatiomatic)
library(dplyr)
library(caret)
library(boot)
library(kableExtra)
rm(list=ls())
```

## Problem Statement

```{r, echo = FALSE}
data <- read.table("housing-prices-ge19.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
```

-   Predicting house prices based on various property-related features is a 
critical challenge in real estate, affecting buyers, sellers, and investors alike.
-   The dataset represents property features and corresponding house prices in 
[Saratoga County, New York (2006)](https://dasl.datadescription.com/datafile/housing-prices-ge19).
-   Goal : To predict how much a house will cost based on its characteristics.
-   Key dependent variable : Price (a variable to measure house prices)

## EDA {.smaller}

::: columns
::: {.column width="50%"}
```{r, fig.align="center", echo = FALSE}
plot(data$Lot.Size, data$Price, main = "Price vs Lot Size", 
     xlab = "Lot Size", ylab = "Price", 
     col = "black",                      
     bg = adjustcolor("#E6E6FA", alpha.f = 0.5), 
     pch = 21,                          
     cex = 1.7)                          
grid()
```

-   Most houses have small lot sizes (0 to 1.5) with prices ranging up to 600,000. Larger lot sizes are less common, and the relationship between lot size and price is weak, as prices vary widely even for similar lot sizes.
:::

::: {.column width="50%"}
```{r, fig.align="center", echo = FALSE}
boxplot(data$Price ~ data$Waterfront, main = "Price vs Waterfront", xlab = "Waterfront", ylab = "Price", col = "#D8BFD8", outcol = "#9F2B68", cex = 1.2)
grid()
```

-   Waterfront properties (1) have higher median prices (\~500,000) with more variability compared to non-waterfront properties (0) have lower median prices (\~250,000) but many high-priced outliers.
:::
:::

## Preprocessing Data

```{r, echo = FALSE}
x = readxl::read_excel(paste(getwd(), "housing_prices.xlsx", sep = "/"))
```

```{r, echo = FALSE}
cleaned_data <- x %>%
  select(-Test)
cleaned_data <- cleaned_data %>%
  filter(!(Heat.Type == "None" | 
           Fuel.Type == "Unknown/Other" | 
           Lot.Size == 0 | 
           Sewer.Type == "None/Unknown"))
```

-   **Load Data**: Import the housing_prices.xlsx file into the variable x.

::: callout-important
### Cleaning data
-   **Remove Column**: The Test column is removed.
-   **Filter Data**: Rows with invalid values for Heat.Type, Fuel.Type, Lot.Size, and Sewer.Type are filtered out (30 units removed).
:::

-   **Build Models**:
    -   **model**: A Linear regression model is created using all features to predict house prices.
    -   **model2**: Baseline linear regression model with only an intercept (no predictors), for comparison purposes.

## Checking assumption {.smaller}

```{r, echo = FALSE}
model = lm(Price ~ ., data = cleaned_data)
model2 = lm(Price ~ 1, data = cleaned_data)
```


::: columns
::: {.column width="50%"}
```{r, echo = FALSE}
par(mfrow = c(1, 1))
plot(model, which = 1)
```
:::

::: {.column width="50%"}
```{r, echo = FALSE}
plot(model, which = 2)
par(mfrow = c(1, 1))
```

- Normality violation
:::
:::



## Model selection {.smaller}

::: columns
::: {.column width="50%"}
- AIC Backward/Forward Selection
```{r, echo = FALSE}
step.back.aic = step(model, direction = "backward", trace = FALSE)
step.fwd.aic = step(model2, scope = list(lower = model2, upper = model), direction = "forward", trace=FALSE)
sjPlot::tab_model(step.fwd.aic, step.back.aic, show.ci = FALSE, show.aic = TRUE,
                  CSS = list(css.table = "font-size: 45%;"),
                  dv.labels = c("Forward model (AIC)", "Backward model (AIC)"))
```
:::

::: {.column width="50%"}
- BIC Backward/Forward Selection
```{r, echo = FALSE}
step.back.bic <- step(model, direction = "backward", trace = FALSE, 
                      k = log(nrow(cleaned_data)))
step.fwd.bic <- step(model2, scope = list(lower = model2, upper = model), 
                     direction = "forward", trace=FALSE, 
                     k = log(nrow(cleaned_data)))

bic_back <- BIC(step.back.bic)
bic_fwd <- BIC(step.fwd.bic)

sjPlot::tab_model(step.back.bic, step.fwd.bic, show.ci = FALSE,
                  CSS = list(css.table = "font-size: 45%;"),
                  dv.labels = c("Backward model (BIC)","Forward model (BIC)"))
```

```{r, echo = FALSE, fig.align="center"}

bic_df <- data.frame(
  Model = c("Backward Model (BIC)", "Forward Model (BIC)"),
  BIC_Value = c(bic_back, bic_fwd)
)

bic_df %>%
  kable("html", digits = 3, col.names = c("Model Type", "BIC Value")) %>%
  kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed")) 
```

:::
:::

## Model selection {.smaller}

::: columns
::: {.column width="50%"}
- AIC Backward/Forward Selection
```{r, echo = FALSE}
step.back.aic = step(model, direction = "backward", trace = FALSE)
step.fwd.aic = step(model2, scope = list(lower = model2, upper = model), direction = "forward", trace=FALSE)
sjPlot::tab_model(step.fwd.aic, step.back.aic, show.ci = FALSE, show.aic = TRUE,
                  CSS = list(css.table = "font-size: 45%;"),
                  dv.labels = c("Forward model (AIC)", "Backward model (AIC)"))
```
:::

::: {.column width="50%"}
- BIC Backward/Forward Selection
```{r, echo = FALSE}
step.back.bic <- step(model, direction = "backward", trace = FALSE, 
                      k = log(nrow(cleaned_data)))
step.fwd.bic <- step(model2, scope = list(lower = model2, upper = model), 
                     direction = "forward", trace=FALSE, 
                     k = log(nrow(cleaned_data)))

bic_back <- BIC(step.back.bic)
bic_fwd <- BIC(step.fwd.bic)

sjPlot::tab_model(step.back.bic, step.fwd.bic, show.ci = FALSE,
                  CSS = list(css.table = "font-size: 45%;"),
                  dv.labels = c("Backward model (BIC)","Forward model (BIC)"))
```

```{r, echo = FALSE, fig.height= 1, fig.width= 3}

bic_df <- data.frame(
  Model = c("Backward Model (BIC)", "Forward Model (BIC)"),
  BIC_Value = c(bic_back, bic_fwd)
)

bic_df %>%
  kable("html", digits = 3, col.names = c("Model Type", "BIC Value")) %>%
  kable_styling(full_width = F, bootstrap_options = c("striped", "hover", "condensed")) 
```

:::
:::

## Quarto

::: callout-note
### Note title

Note text
:::

::: callout-tip
### Tip title

Tip text
:::

::: callout-important
### Important title

Important text
:::

::: notes
Speaker notes go here. Press `s` to see.
:::

::: footer
Footers for comments, or links to further resources. These don't show up when printing the slides to pdf!
:::

## Asides

> Block quote

-   For further details on customisations available see [here](https://quarto.org/docs/presentations/revealjs/)
-   Icons can be included by installing the [fontawesome](https://github.com/quarto-ext/fontawesome) Quarto [extension](https://quarto.org/docs/extensions/).

::: aside
Asides will be on the slide when printed.
:::

# Layouts

## Layout

::: {layout-ncol="2"}
### List One

-   [Item A]{.blue}
-   [Item B]{.red}
-   [Item C]{.purple}
-   Item D

### List Two

-   **Item X**
-   *Item Y*
-   ~~Item Z~~
:::

## Columns (more customisable)

::: columns
::: {.column width="40%"}
Left column
:::

::: {.column width="60%"}
Right column
:::
:::

## Plots: below code

```{r}
library(ggplot2)
p1 = iris |> ggplot() +
  aes(x = Petal.Length, y = Petal.Width, colour = Species) + 
  geom_point(size = 4) + theme_classic(base_size = 20)
p1
```

## Plots: hide code using `echo: false`

```{r}
#| echo: false
p1
```

## Plots: auto two column using `output-location: column`

```{r}
#| output-location: column
#| fig-height: 8
p1 = iris |> ggplot() +
  aes(x = Petal.Length, 
      y = Petal.Width, 
      colour = Species) + 
  geom_point(size = 4) + 
  theme_classic(base_size = 30)
p1
```

## Bullets

When you click the **Render** button a document will be generated that includes:

-   Content authored with markdown
-   Output from executable code

. . .

Reference @tidyverse

## Code

When you click the **Render** button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

## Handy R package

The [`quartostamp`](https://matt-dray.github.io/quartostamp/index.html) R package provides RStudio "Addins" that make life easier for working with Quarto documents. It has a bunch of templates, e.g. for creating

-   callout blocks
-   columns
-   tabsets
-   footnotes
-   pauses
-   speaker notes...

## References
